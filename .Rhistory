#'
#' @usage scaleMONIdata(moni.data)
#' @param moni.data a combined organized MONI-PAM data which is generated from [readMONIPAM] function, or a MONI-PAM data after data filtering which is generated from filter function in this package such as [filter1.NA], [filter2.night] and so on.
#'
#' @return [scaleMONIdata] will return a data.table which contains the maximum and minimum values of F',FM',Yield, PAR, and temperature values for each plotting groups (every 10 days as a group) and each MONI-head
#' @export
scaleMONIdata<-function(moni.data){
moni.data<-formatMONIdata(moni.data=moni.data)
data<-moni.data %>%
dplyr::select(plot.group,head,tree_num,head_tree,
F_,Fm_,Yield,par_moni,temp_moni)
maxmin.res<-
data %>%
group_by(plot.group,head,tree_num,head_tree) %>%
dplyr::summarise(
across(
.col=c('F_','Fm_','Yield','par_moni','temp_moni'),
.fns=list(max=~max(.,na.rm = T),
min=~min(.,na.rm=T)),
.names = "{.fn}.{.col}"
),
.groups = 'drop'
)
maxmin.res[sapply(maxmin.res, is.infinite)] <- NA
maxmin.res<-
maxmin.res %>%
mutate(scale.Fm.a=(max.Yield-min.Yield)/(max.Fm_-min.Fm_)) %>%
mutate(scale.Fm.b=min.Yield-scale.Fm.a*min.Fm_) %>%
mutate(scale.temp.a=(max.Yield-min.Yield)/(max.temp-min.temp)) %>%
mutate(scale.temp.b=min.Yield-scale.temp.a*min.temp) %>%
mutate(scale.par.a=(max.Yield-min.Yield)/(max.par-min.par)) %>%
mutate(scale.par.b=min.Yield-scale.par.a*min.par)
maxmin.res[sapply(maxmin.res, is.infinite)] <- NA
maxmin.res[sapply(maxmin.res, is.nan)]<-NA
maxmin.res[,c(15,17,19)][sapply(maxmin.res[,c(15,17,19)],is.na)]<-1
maxmin.res[,c(16,18,20)][sapply(maxmin.res[,c(16,18,20)],is.na)]<-0
return(maxmin.res)
}
extreme.data<-scaleMONIdata(rawdata)
i
rawdata.onegroup<-
droplevels(rawdata[rawdata$plot.group==i,])
isTRUE(sum(na.omit(rawdata.onegroup$Yield))>0&
length(na.omit(rawdata.onegroup$Yield))>2)
newdata.onegroup<-
droplevels(newdata[newdata$plot.group==i,])
if (isTRUE('flag.all' %in% colnames(rawdata.onegroup))){
flag.data<-rawdata.onegroup
flag.data<-
merge(newdata.onegroup[,c("datetime",'head_tree','flag.all')],
rawdata.onegroup[,-c('flag.all')],
by=c("datetime",'head_tree'),all=T)
} else {
flag.data<-
merge(newdata.onegroup[,c("datetime",'head_tree','flag.all')],
rawdata.onegroup,by=c("datetime",'head_tree'),all=T)
}
flag.data0<-flag.data[flag.data$flag.all==0,]
flag.data2<-newdata.onegroup[which((!is.na(newdata.onegroup$Fm_))& # there is Fm' value but Yield is flagged
newdata.onegroup$flag.all==0),]
scaledata.onegroup<-
droplevels(extreme.data[extreme.data$plot.group==i,])
scaledata.onegroup
j
scale.data<-
droplevels(scaledata.onegroup[scaledata.onegroup$head_tree==j,])
attach(scale.data,warn.conflicts = F)
top.data0<-
droplevels(flag.data0[flag.data0$head_tree==j,])
top.data2<-
droplevels(flag.data2[flag.data2$head_tree==j,])
bottom.data<-
droplevels(rawdata.onegroup[rawdata.onegroup$head_tree==j,])
if (isTRUE(diary==T)){
diary.group<-
droplevels(setDT(diary.data)[diary.data$head_tree==j&
diary.data$plot.group==i,
c('datetime','head_tree',
'plot.group','remark.plot')])
}
print(paste0('plot.group[',i,']:',j))
night<-unique(bottom.data[,c('date','sunsetStart','sunrise')])
night<-night[order(night$sunsetStart),]
if (nrow(night)>1){
night$sunriseDay2<-ymd_hms(night$sunrise[2:nrow(night)],NA)
} else if(nrow(night)==1){
night$sunriseDay2<-night$sunrise+3600*24
}
night<-merge(bottom.data[,c('datetime','date')],night,by='date',all=T)
p1<-ggplot(bottom.data,aes(x=datetime))+
geom_rect(data=night,fill='lightskyblue1',na.rm = T,alpha=0.008,
aes(xmin=sunsetStart,xmax=sunriseDay2,
ymin=-Inf,ymax=Inf))+
geom_vline(aes(xintercept=sunrise),na.rm = T,
color='indianred1',linetype=2)+
geom_vline(aes(xintercept=solarNoon),na.rm = T,
color='goldenrod1',linetype=2)+
geom_vline(aes(xintercept=sunsetStart),na.rm = T,
color='indianred1',linetype=2)+
geom_vline(aes(xintercept=dusk),na.rm = T,
color='purple',linetype=2)+
geom_vline(aes(xintercept=dawn),na.rm = T,
color='purple',linetype=2)+
geom_line(aes(y=scale.temp.a*temp_moni+scale.temp.b),
color='darkorchid',na.rm = T)+
geom_line(aes(y=scale.par.a*par_moni+scale.par.b),
color='yellow3',na.rm = T)+
geom_line(aes(y=scale.Fm.a*F_+scale.Fm.b),color='grey30',na.rm = T)+
geom_point(aes(y=scale.Fm.a*F_+scale.Fm.b),size=1,color='grey30',na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=1,color='orangered',na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=1,color='grey30',na.rm = T)+
geom_line(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='black',na.rm = T)+
geom_point(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='black',size=1,na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='deeppink',size=1,na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='black',size=1,na.rm = T)+
geom_line(aes(y=Yield),color='forestgreen',na.rm = T)+
geom_point(aes(y=Yield),size=1,color='forestgreen',na.rm = T)+
geom_point(data=top.data0,aes(y=Yield),size=1,color='red2',na.rm = T)+
scale_x_datetime(breaks = date_breaks("1 day"),
labels = date_format("%b-%d\n%H:%M"),
limits = c(range(na.omit(rawdata.onegroup$datetime))[1],
range(na.omit(rawdata.onegroup$datetime))[2]))+
scale_y_continuous(
sec.axis = sec_axis(~(.-scale.Fm.b)/scale.Fm.a,
name="Fm' or <b style='color:#808080'>F'</b>"),
name = bquote(atop(paste(Phi,'PSII'),
.(j))))+
theme_bw()+
theme(legend.position = 'none',
axis.text.y.left = element_text(size = 15,color = 'forestgreen'),
axis.text.y.right = element_text(size = 15,color = 'black'),
axis.text.x =  element_text(size = 15,color = 'black'),
axis.title.y.right  = element_markdown(size = 16),
axis.title.y.left = element_text(size = 16,color = 'forestgreen'),
axis.title.x =element_blank(),
axis.ticks.y.left =element_line(color = 'forestgreen'),
axis.line.y.left = element_line(color = 'forestgreen'),
plot.margin = unit(c(0,0,0,0),'cm'))
if (isTRUE(diary==TRUE)){
if (isTRUE(length(na.omit(diary.group$remark.plot))>0)) {# when there is diary note for this plotgroup
p1<-p1+
geom_point(data=na.omit(diary.group),
aes(x=datetime,y=max(bottom.data$Yield,na.rm = T)-0.05),
color='red',size=4,na.rm = T)+
geom_text(data=na.omit(diary.group),
aes(x=datetime,y=max(bottom.data$Yield,na.rm = T),
label=remark.plot),color='red',size=3,na.rm = T)
} else {
p1<-p1
}
} else {
p1<-p1
}
p23.fc<-function(p23.color){
ggplot(bottom.data,aes(x=datetime))+
geom_line(aes(y=scale.temp.a*temp_moni+scale.temp.b),
linewidth=0.1,color='white',na.rm = T)+
geom_line(aes(y=scale.par.a*par_moni+scale.par.b),
linewidth=0.1,color='white',na.rm = T)+
geom_line(aes(y=Yield),color='white',na.rm = T)+
geom_point(aes(y=Yield),size=0.5,color='white',na.rm = T)+
geom_point(data=top.data0,aes(y=Yield),size=0.5,color='white',na.rm = T)+
geom_line(aes(y=scale.Fm.a*F_+scale.Fm.b),color='white',na.rm = T)+
geom_point(aes(y=scale.Fm.a*F_+scale.Fm.b),size=0.5,color='white',na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=0.5,color='white',na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=0.5,color='white',na.rm = T)+
geom_line(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='white',na.rm = T)+
geom_point(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='white',size=0.5,na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='white',size=0.5,na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='white',size=0.5,na.rm = T)+
theme_minimal()+
theme(legend.position = 'none',
axis.text.y.left = element_blank(),
axis.text.x =   element_blank(),
axis.title.y.left = element_blank(),
axis.title.x =element_blank(),
axis.ticks.y.left = element_blank(),
panel.grid=element_blank(),
plot.margin = unit(c(0,0,0,0),'cm'),
axis.text.y.right = element_text(size = 15,color = p23.color),
axis.line.y.right = element_line(color = p23.color),
axis.title.y.right  = element_text(size = 16,color = p23.color),
axis.ticks.y.right =element_line(color = p23.color))
}
p2<-p23.fc('darkorchid')+
scale_y_continuous(
sec.axis = sec_axis(~(.-scale.temp.b)/scale.temp.a,
name=expression(paste('Temp ('^'o','C)'))))
p3<-p23.fc('yellow3')+
scale_y_continuous(
sec.axis = sec_axis(~(.-scale.par.b)/scale.par.a,
name='PAR'))
plot.moni.figure <- p1 + p2 + p3 +
plot_layout(nrow =1, widths = c(15, 0.1, 0.1))
plot.moni.figure
range(bottom.data$temp_moni)
range(bottom.data$Yield)
range(scale.temp.a*bottom.data$temp_moni+scale.temp.b)
scale.temp.a
scale.temp.b
a=(max.Yield-min.Yield)/(max.temp-min.temp))
a=(max.Yield-min.Yield)/(max.temp-min.temp)
a
a=(max(bottom.data$Yield,na.rm = T)-min.Yield(bottom.data$Yield,na.rm = T))/(max.temp(bottom.data$temp_moni,na.rm = T)-min.temp(bottom.data$temp_moni,na.rm = T))
a=(max(bottom.data$Yield,na.rm = T)-min(bottom.data$Yield,na.rm = T))/(max(bottom.data$temp_moni,na.rm = T)-min(bottom.data$temp_moni,na.rm = T))
a
moni.data
moni.data<-formatMONIdata(moni.data=moni.data)
data<-moni.data %>%
dplyr::select(plot.group,head,tree_num,head_tree,
F_,Fm_,Yield,par_moni,temp_moni)
maxmin.res<-
data %>%
group_by(plot.group,head,tree_num,head_tree) %>%
dplyr::summarise(
across(
.col=c('F_','Fm_','Yield','par_moni','temp_moni'),
.fns=list(max=~max(.,na.rm = T),
min=~min(.,na.rm=T)),
.names = "{.fn}.{.col}"
),
.groups = 'drop'
)
maxmin.res[sapply(maxmin.res, is.infinite)] <- NA
max(bottom.data$Yield,na.rm = T)
min(bottom.data$Yield,na.rm = T)
max(bottom.data$temp_moni,na.rm = T)
min(bottom.data$temp_moni,na.rm = T)
View(maxmin.res)
min.temp
names(maxmin.res)
#' obtain extreme values of MONI-PAM data
#'
#' These extreme values of MONI-PAM data will be used for MONI-PAM data visualization
#'
#' @usage scaleMONIdata(moni.data)
#' @param moni.data a combined organized MONI-PAM data which is generated from [readMONIPAM] function, or a MONI-PAM data after data filtering which is generated from filter function in this package such as [filter1.NA], [filter2.night] and so on.
#'
#' @return [scaleMONIdata] will return a data.table which contains the maximum and minimum values of F',FM',Yield, PAR, and temperature values for each plotting groups (every 10 days as a group) and each MONI-head
#' @export
scaleMONIdata<-function(moni.data){
moni.data<-formatMONIdata(moni.data=moni.data)
data<-moni.data %>%
dplyr::select(plot.group,head,tree_num,head_tree,
F_,Fm_,Yield,par_moni,temp_moni)
maxmin.res<-
data %>%
group_by(plot.group,head,tree_num,head_tree) %>%
dplyr::summarise(
across(
.col=c('F_','Fm_','Yield','par_moni','temp_moni'),
.fns=list(max=~max(.,na.rm = T),
min=~min(.,na.rm=T)),
.names = "{.fn}.{.col}"
),
.groups = 'drop'
)
maxmin.res[sapply(maxmin.res, is.infinite)] <- NA
maxmin.res<-
maxmin.res %>%
mutate(scale.Fm.a=(max.Yield-min.Yield)/(max.Fm_-min.Fm_)) %>%
mutate(scale.Fm.b=min.Yield-scale.Fm.a*min.Fm_) %>%
mutate(scale.temp.a=(max.Yield-min.Yield)/(max.temp_moni-min.temp_moni)) %>%
mutate(scale.temp.b=min.Yield-scale.temp.a*min.temp_moni) %>%
mutate(scale.par.a=(max.Yield-min.Yield)/(max.par_moni-min.par_moni)) %>%
mutate(scale.par.b=min.Yield-scale.par.a*min.par_moni)
maxmin.res[sapply(maxmin.res, is.infinite)] <- NA
maxmin.res[sapply(maxmin.res, is.nan)]<-NA
maxmin.res[,c(15,17,19)][sapply(maxmin.res[,c(15,17,19)],is.na)]<-1
maxmin.res[,c(16,18,20)][sapply(maxmin.res[,c(16,18,20)],is.na)]<-0
return(maxmin.res)
}
extreme.data<-scaleMONIdata(rawdata)
rawdata.onegroup<-
droplevels(rawdata[rawdata$plot.group==i,])
newdata.onegroup<-
droplevels(newdata[newdata$plot.group==i,])
if (isTRUE('flag.all' %in% colnames(rawdata.onegroup))){
flag.data<-rawdata.onegroup
flag.data<-
merge(newdata.onegroup[,c("datetime",'head_tree','flag.all')],
rawdata.onegroup[,-c('flag.all')],
by=c("datetime",'head_tree'),all=T)
} else {
flag.data<-
merge(newdata.onegroup[,c("datetime",'head_tree','flag.all')],
rawdata.onegroup,by=c("datetime",'head_tree'),all=T)
}
flag.data0<-flag.data[flag.data$flag.all==0,]
flag.data2<-newdata.onegroup[which((!is.na(newdata.onegroup$Fm_))& # there is Fm' value but Yield is flagged
newdata.onegroup$flag.all==0),]
scaledata.onegroup<-
droplevels(extreme.data[extreme.data$plot.group==i,])
scale.data<-
droplevels(scaledata.onegroup[scaledata.onegroup$head_tree==j,])
attach(scale.data,warn.conflicts = F)
top.data0<-
droplevels(flag.data0[flag.data0$head_tree==j,])
top.data2<-
droplevels(flag.data2[flag.data2$head_tree==j,])
bottom.data<-
droplevels(rawdata.onegroup[rawdata.onegroup$head_tree==j,])
if (isTRUE(diary==T)){
diary.group<-
droplevels(setDT(diary.data)[diary.data$head_tree==j&
diary.data$plot.group==i,
c('datetime','head_tree',
'plot.group','remark.plot')])
}
night<-unique(bottom.data[,c('date','sunsetStart','sunrise')])
night<-night[order(night$sunsetStart),]
if (nrow(night)>1){
night$sunriseDay2<-ymd_hms(night$sunrise[2:nrow(night)],NA)
} else if(nrow(night)==1){
night$sunriseDay2<-night$sunrise+3600*24
}
night<-merge(bottom.data[,c('datetime','date')],night,by='date',all=T)
p1<-ggplot(bottom.data,aes(x=datetime))+
geom_rect(data=night,fill='lightskyblue1',na.rm = T,alpha=0.008,
aes(xmin=sunsetStart,xmax=sunriseDay2,
ymin=-Inf,ymax=Inf))+
geom_vline(aes(xintercept=sunrise),na.rm = T,
color='indianred1',linetype=2)+
geom_vline(aes(xintercept=solarNoon),na.rm = T,
color='goldenrod1',linetype=2)+
geom_vline(aes(xintercept=sunsetStart),na.rm = T,
color='indianred1',linetype=2)+
geom_vline(aes(xintercept=dusk),na.rm = T,
color='purple',linetype=2)+
geom_vline(aes(xintercept=dawn),na.rm = T,
color='purple',linetype=2)+
geom_line(aes(y=scale.temp.a*temp_moni+scale.temp.b),
color='darkorchid',na.rm = T)+
geom_line(aes(y=scale.par.a*par_moni+scale.par.b),
color='yellow3',na.rm = T)+
geom_line(aes(y=scale.Fm.a*F_+scale.Fm.b),color='grey30',na.rm = T)+
geom_point(aes(y=scale.Fm.a*F_+scale.Fm.b),size=1,color='grey30',na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=1,color='orangered',na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=1,color='grey30',na.rm = T)+
geom_line(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='black',na.rm = T)+
geom_point(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='black',size=1,na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='deeppink',size=1,na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='black',size=1,na.rm = T)+
geom_line(aes(y=Yield),color='forestgreen',na.rm = T)+
geom_point(aes(y=Yield),size=1,color='forestgreen',na.rm = T)+
geom_point(data=top.data0,aes(y=Yield),size=1,color='red2',na.rm = T)+
scale_x_datetime(breaks = date_breaks("1 day"),
labels = date_format("%b-%d\n%H:%M"),
limits = c(range(na.omit(rawdata.onegroup$datetime))[1],
range(na.omit(rawdata.onegroup$datetime))[2]))+
scale_y_continuous(
sec.axis = sec_axis(~(.-scale.Fm.b)/scale.Fm.a,
name="Fm' or <b style='color:#808080'>F'</b>"),
name = bquote(atop(paste(Phi,'PSII'),
.(j))))+
theme_bw()+
theme(legend.position = 'none',
axis.text.y.left = element_text(size = 15,color = 'forestgreen'),
axis.text.y.right = element_text(size = 15,color = 'black'),
axis.text.x =  element_text(size = 15,color = 'black'),
axis.title.y.right  = element_markdown(size = 16),
axis.title.y.left = element_text(size = 16,color = 'forestgreen'),
axis.title.x =element_blank(),
axis.ticks.y.left =element_line(color = 'forestgreen'),
axis.line.y.left = element_line(color = 'forestgreen'),
plot.margin = unit(c(0,0,0,0),'cm'))
if (isTRUE(diary==TRUE)){
if (isTRUE(length(na.omit(diary.group$remark.plot))>0)) {# when there is diary note for this plotgroup
p1<-p1+
geom_point(data=na.omit(diary.group),
aes(x=datetime,y=max(bottom.data$Yield,na.rm = T)-0.05),
color='red',size=4,na.rm = T)+
geom_text(data=na.omit(diary.group),
aes(x=datetime,y=max(bottom.data$Yield,na.rm = T),
label=remark.plot),color='red',size=3,na.rm = T)
} else {
p1<-p1
}
} else {
p1<-p1
}
p23.fc<-function(p23.color){
ggplot(bottom.data,aes(x=datetime))+
geom_line(aes(y=scale.temp.a*temp_moni+scale.temp.b),
linewidth=0.1,color='white',na.rm = T)+
geom_line(aes(y=scale.par.a*par_moni+scale.par.b),
linewidth=0.1,color='white',na.rm = T)+
geom_line(aes(y=Yield),color='white',na.rm = T)+
geom_point(aes(y=Yield),size=0.5,color='white',na.rm = T)+
geom_point(data=top.data0,aes(y=Yield),size=0.5,color='white',na.rm = T)+
geom_line(aes(y=scale.Fm.a*F_+scale.Fm.b),color='white',na.rm = T)+
geom_point(aes(y=scale.Fm.a*F_+scale.Fm.b),size=0.5,color='white',na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=0.5,color='white',na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*F_+scale.Fm.b),
size=0.5,color='white',na.rm = T)+
geom_line(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='white',na.rm = T)+
geom_point(aes(y=scale.Fm.a*Fm_+scale.Fm.b),color='white',size=0.5,na.rm = T)+
geom_point(data=top.data0,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='white',size=0.5,na.rm = T)+
geom_point(data=top.data2,aes(y=scale.Fm.a*Fm_+scale.Fm.b),
color='white',size=0.5,na.rm = T)+
theme_minimal()+
theme(legend.position = 'none',
axis.text.y.left = element_blank(),
axis.text.x =   element_blank(),
axis.title.y.left = element_blank(),
axis.title.x =element_blank(),
axis.ticks.y.left = element_blank(),
panel.grid=element_blank(),
plot.margin = unit(c(0,0,0,0),'cm'),
axis.text.y.right = element_text(size = 15,color = p23.color),
axis.line.y.right = element_line(color = p23.color),
axis.title.y.right  = element_text(size = 16,color = p23.color),
axis.ticks.y.right =element_line(color = p23.color))
}
p2<-p23.fc('darkorchid')+
scale_y_continuous(
sec.axis = sec_axis(~(.-scale.temp.b)/scale.temp.a,
name=expression(paste('Temp ('^'o','C)'))))
p3<-p23.fc('yellow3')+
scale_y_continuous(
sec.axis = sec_axis(~(.-scale.par.b)/scale.par.a,
name='PAR'))
print(paste0("plot.group[",i,"]:",j," is plotted"))
plot.moni.figure <- p1 + p2 + p3 +
plot_layout(nrow =1, widths = c(15, 0.1, 0.1))
plot.moni.figure
devtools::load_all("C:/LocalData/zhangcha/New folder/processMONIPAM")
devtools::load_all("C:/LocalData/zhangcha/New folder/processMONIPAM")
detach('package:processMONIPAM',unload = T)
remove.packages("processMONIPAM")
install.packages("C:/LocalData/zhangcha/New folder/processMONIPAM_0.0.0.9000.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(eval = FALSE)
# load processMONIPAM package
library(processMONIPAM)
# check the work directory location
getwd()
package.list<-c('plyr','splitstackshape','lubridate','stringr','data.table',
'tidyr','suncalc','dplyr','ggplot2','scales','ggtext','ggpubr',
'cowplot','patchwork')
lapply(package.list, FUN = function(p) {
if(!do.call("require", list(p))) {
install.packages(p)
library(p)
}
})
MONI2014.2015<-
read.MONIPAM(source.path=system.file("extdata/2014-2015/",package = "processMONIPAM"),
pam.pattern = '.PAM',
save.path = getwd(),# it is better to modify this to your local path
site.lat =61.84562, # hyytiala latitude
site.lon = 24.29077, # hyytiala longitude
local.tz = 'EET', # time zone of Finland
tz.summer =  3,
tz.winter = 2,
measure.time = 'winter' # In Hyytiala forest station, we always use winter time
)
# load processMONIPAM package
library(processMONIPAM)
# check the work directory location
getwd()
package.list<-c('plyr','splitstackshape','lubridate','stringr','data.table',
'tidyr','suncalc','dplyr','ggplot2','scales','ggtext','ggpubr',
'cowplot','patchwork')
lapply(package.list, FUN = function(p) {
if(!do.call("require", list(p))) {
install.packages(p)
library(p)
}
})
setwd("C:/LocalData/zhangcha/New folder/processMONIPAM/vignettes")
# load processMONIPAM package
library(processMONIPAM)
package.list<-c('plyr','splitstackshape','lubridate','stringr','data.table',
'tidyr','suncalc','dplyr','ggplot2','scales','ggtext','ggpubr',
'cowplot','patchwork')
lapply(package.list, FUN = function(p) {
if(!do.call("require", list(p))) {
install.packages(p)
library(p)
}
})
MONI2014.2015<-
read.MONIPAM(source.path=system.file("extdata/2014-2015/",package = "processMONIPAM"),
pam.pattern = '.PAM',
save.path = getwd(),# it is better to modify this to your local path
site.lat =61.84562, # hyytiala latitude
site.lon = 24.29077, # hyytiala longitude
local.tz = 'EET', # time zone of Finland
tz.summer =  3,
tz.winter = 2,
measure.time = 'winter' # In Hyytiala forest station, we always use winter time
)
system.file("extdata/2014-2015/",package = "processMONIPAM")
read.MONIPAM
